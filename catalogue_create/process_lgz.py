# Code to process LGZ output with the too-zoomed-in (or other)
# datasets. Reads in the output from Jude's code plus the per-source
# data that are generated by zoom.py. Then, if sources in Jude's list
# are unaltered, we pass them through unchanged, but if they are
# affected by the per-source files, we add or remove lines from the
# table as appropriate.

from astropy.table import Table
import numpy as np
import os
from copy import deepcopy
from astropy.coordinates import SkyCoord
from separation import separation
import astropy.units as u
import glob

from source_handler import Source,parsefile

def sourcename(ra,dec):
    sc=SkyCoord(ra*u.deg,dec*u.deg,frame='icrs')
    s=sc.to_string(style='hmsdms',sep='',precision=2)
    return str('ILTJ'+s).replace(' ','')[:-1]
    
scale=3600.0 # scaling factor for region sizes

print 'Reading tables, please wait...'
pyb=Table.read('LOFAR_HBA_T1_DR1_catalog_v0.9.srl.fixed.fits')
lgz=Table.read('HETDEX-LGZ-cat-v0.6-filtered.fits')
ocat=Table.read('/data/lofar/mjh/hetdex_ps1_allwise_photoz_v0.2.fits')
opcat=SkyCoord(ocat['ra']*u.deg, ocat['dec']*u.deg)

ss=Source()

for i,r in enumerate(lgz):
    k=r['Source_Name']
    ss.set_components(k,[])
    ss.set_lgz_number(k,i)

# components.txt contains components for straight lgz outputs

clines=open('components.txt').readlines()
for c in clines:
    bits=c.split()
    ss.add(bits[0],bits[1].rstrip())
    ss.mdict[bits[0]]=1

ss.reset_changes() # ignore all 'changes' from initialization
    
'''
for r in lgz:
    n=r['Source_Name']
    dir='/data/lofar/mjh/hetdex_v4/zoom/'
    if os.path.isfile(dir+n+'.txt'):
        parsefile(n,ss,dir=dir)
        ss.mdict[n]=2
'''

# zooms table includes overrides for all sources, including ones that may not have come from lgz

dir='/data/lofar/mjh/hetdex_v4/zoom/'
g=glob.glob(dir+'ILT*.txt')
for f in g:
    n=f.split('/')[-1].replace('.txt','')
    print 'Parsing file for source',n
    parsefile(n,ss,dir=dir)
    ss.mdict[n]=2

olgz=lgz[:0].copy()

remove=open('lgz_components.txt','w')

for k in ss.cdict:
    if len(ss.cdict[k])==0:
        print 'Dropping source',k,'as it has no components'
        r=None
    elif not(ss.changed_dict[k]):
        print 'Source',k,'has not changed'
        # source has not changed, which means it can be copied from the corresponding entry in the lgz table
        r=lgz[ss.idict[k]]
    else:
        # source has changed, or was only ever present in zooms text
        print 'Source',k,'is flagged as having changed'
        r=lgz[0]
        # Clear some fields to default values
        for j in ['Art_prob','Blend_prob','Zoom_prob','Hostbroken_prob','ID_Qual','Assoc_Qual','Assoc', 'Compoverlap']:
            r[j]=0
        r['OptID_Name']='None'
        r['optRA']=np.nan
        r['optDec']=np.nan
        # recreate all of the source's info from its component list
        pfilter=np.array([False]*len(pyb))
        cnames=ss.get_comps(k)
        for n in cnames:
            pfilter|=(pyb['Source_Name']==n)
        clist=pyb[pfilter]
        assert(len(cnames)==len(clist))
        try:
            ora,odec=ss.odict[k]
        except KeyError:
            ora=None
            odec=None
        if ora is not None:
            print '      Updated optical position',ora,odec
            # later we check for source near this position
        try:
            size=ss.sdict[k]
        except KeyError:
            size=None

        if size is not None:
            print '      Updated size',size

        if len(clist)==1:
            # only one component, so we can use its properties
            c=clist[0]
            r['Assoc']=0
            for key in ['RA','DEC','Total_flux','E_Total_flux','Peak_flux','E_Peak_flux','E_RA','E_DEC','Isl_rms','S_Code','Mosaic_ID']:
                r[key]=c[key]
            r['Size']=c['Maj']
        else:
            r['Assoc']=len(clist)
            ra=np.mean(clist['RA'])
            dec=np.mean(clist['DEC'])
            sname=sourcename(ra,dec)
            print '      New sourcename is',sname
            r['RA']=ra
            r['DEC']=dec
            r['Source_Name']=sname
            r['E_RA']=np.sqrt(np.mean(clist['E_RA']**2.0))
            r['E_DEC']=np.sqrt(np.mean(clist['E_DEC']**2.0))
            r['Source_Name']=sname
            r['Total_flux']=np.sum(clist['Total_flux'])
            r['E_Total_flux']=np.sqrt(np.sum(clist['E_Total_flux']**2.0))
            maxpk=np.argmax(clist['Peak_flux'])
            r['Peak_flux']=clist[maxpk]['Peak_flux']
            r['E_Peak_flux']=clist[maxpk]['E_Peak_flux']
            r['S_Code']='M'
            r['Isl_rms']=np.mean(clist['Isl_rms'])
            r['Mosaic_ID']=clist[maxpk]['Mosaic_ID']
            seps=[]
            for c in clist:
                seps.append(separation(c['RA'],c['DEC'],clist['RA'],clist['DEC']))
            maxsep=np.max(seps)*scale
            maxsize=np.max(clist['Maj'])
            maxsize=max((maxsep,maxsize))
            if size is not None:
                if size>maxsize:
                    maxsize=size
            print 'sizes:',maxsep,maxsize
            r['Size']=maxsize

        r['Assoc_Qual']=1
        if k in ss.blends:
            r['Blend_prob']=1

        r['Zoom_prob']=0 # since these should all have been resolved
        if ora is not None:
            # check opt position
            sep=separation(ora,odec,r['optRA'],r['optDec'])
            if np.isnan(sep) or sep>1.0:
                print '         Separation is',sep,'updating with new opt pos'
                c=SkyCoord(ora*u.deg,odec*u.deg)
                idx, d2d, d3d = c.match_to_catalog_sky(opcat)
                sep=d2d.value*scale
                if sep>12:
                    print '     Bad optical position! sep = ',sep
                else:
                    idx=int(idx)
                    ora=ocat[idx]['ra']
                    odec=ocat[idx]['dec']
                    if ocat[idx]['AllWISE']!='N/A':
                        name='AllWISE'+ocat[idx]['AllWISE']
                    else:
                        name='PSO %s' % ocat[idx]['objID']
                    qual=0.667+0.333*(12.0-sep)/12.0

                    r['optRA']=ora
                    r['optDec']=odec
                    r['OptID_Name']=name
                    r['ID_Qual']=qual

    if r is not None:
        olgz.add_row(r)

    comps=ss.get_comps(k)
    for j in comps:
        remove.write('%s %s %i\n' % (j,r['Source_Name'],ss.mdict[k]))
        
olgz.write('HETDEX-LGZ-cat-v0.6-filtered-zooms.fits',overwrite=True)

remove.close()
